package com.diogenestec.zpl.virtual.printer;

import classes.Labels;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import services.ConfigManager;
import services.FileDeletion;
import services.FolderObserver;
import services.IconLoader;
import services.JarRestart;
import services.LabelaryRequest;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author diogenes
 */
public class frmPrograma extends javax.swing.JFrame {
    
    private Labels labelSelect;

    /**
     * Creates new form frmPrograma
     */
    public frmPrograma() {
        initComponents();
        //setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        setLocationRelativeTo(null);
        this.setTitle("ZPL Virtual Printer");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnTestar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnVoltar = new javax.swing.JButton();
        btnAvancar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnConfigurar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        label1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtZpl = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        panel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setRollover(true);

        btnTestar.setText("Testar");
        btnTestar.setFocusable(false);
        btnTestar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTestar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTestar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnTestarMousePressed(evt);
            }
        });
        jToolBar1.add(btnTestar);

        btnDeletar.setText("Deletar");
        btnDeletar.setFocusable(false);
        btnDeletar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeletar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeletar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnDeletarMousePressed(evt);
            }
        });
        jToolBar1.add(btnDeletar);

        btnLimpar.setText("Limpar");
        btnLimpar.setFocusable(false);
        btnLimpar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLimpar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLimpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnLimparMousePressed(evt);
            }
        });
        jToolBar1.add(btnLimpar);
        jToolBar1.add(jSeparator1);

        btnVoltar.setText("Voltar");
        btnVoltar.setFocusable(false);
        btnVoltar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVoltar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVoltar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnVoltarMousePressed(evt);
            }
        });
        jToolBar1.add(btnVoltar);

        btnAvancar.setText("Avan√ßar");
        btnAvancar.setFocusable(false);
        btnAvancar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAvancar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAvancar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAvancarMousePressed(evt);
            }
        });
        jToolBar1.add(btnAvancar);
        jToolBar1.add(jSeparator2);

        btnConfigurar.setText("Configurar");
        btnConfigurar.setFocusable(false);
        btnConfigurar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConfigurar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConfigurar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnConfigurarMousePressed(evt);
            }
        });
        jToolBar1.add(btnConfigurar);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        label1.setText("Label Image");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtZpl.setEditable(false);
        txtZpl.setColumns(20);
        txtZpl.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        txtZpl.setRows(5);
        jScrollPane1.setViewportView(txtZpl);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 998, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 134, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(panel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ImageIcon iconUpload = IconLoader.loadIcon("Upload.png");
        ImageIcon iconTrash = IconLoader.loadIcon("Trash.png");
        ImageIcon iconDelete = IconLoader.loadIcon("Delete.png");
        ImageIcon iconPrevious = IconLoader.loadIcon("Previous.png");
        ImageIcon iconNext = IconLoader.loadIcon("Next.png");
        ImageIcon iconApplication = IconLoader.loadIcon("Application.png");
        
        btnTestar.setIcon(iconUpload);
        btnDeletar.setIcon(iconDelete);
        btnLimpar.setIcon(iconTrash);
        btnVoltar.setIcon(iconPrevious);
        btnAvancar.setIcon(iconNext);
        btnConfigurar.setIcon(iconApplication);
        
        Thread thread = new Thread(() -> {
            FolderObserver f = new FolderObserver(this);
            f.monitore("labels");
        });
        thread.start();
        
        label1.setText("");
        panel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        
        lerImagem();
    }//GEN-LAST:event_formWindowOpened

    private void btnTestarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTestarMousePressed
        getZpl(); 
    }//GEN-LAST:event_btnTestarMousePressed

    private void btnDeletarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeletarMousePressed
        deleteLabel();
    }//GEN-LAST:event_btnDeletarMousePressed

    private void btnLimparMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimparMousePressed
        // Caminho do diret√≥rio "labels"
        String directoryPath = "labels";

        // Cria o diret√≥rio se ele n√£o existir
        File directory = new File(directoryPath);
        if (!directory.exists()) {
            if (directory.mkdir()) {
                System.out.println("Diret√≥rio 'labels' criado com sucesso.");
            } else {
                System.out.println("Falha ao criar o diret√≥rio 'labels'.");
                return;
            }
        } else {
            System.out.println("O diret√≥rio 'labels' j√° existe.");
        }

        // Lista os arquivos do diret√≥rio
        File[] files = directory.listFiles();
        if (files == null || files.length == 0) {
            System.out.println("O diret√≥rio 'labels' est√° vazio.");
            return;
        }
        
        for (File file : files) {
            FileDeletion f = new FileDeletion();
            f.deleteFile("labels/" + file.getName());
            f.deleteFile("labels/" + file.getName().replace(".png", ".txt"));
            
        }
        
        panel1.removeAll();
        panel1.revalidate();
        panel1.repaint();
        txtZpl.setText("");
        label1.setIcon(null);
        label1.revalidate();
        label1.repaint();
    }//GEN-LAST:event_btnLimparMousePressed

    private void btnVoltarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVoltarMousePressed
        Move("back");
    }//GEN-LAST:event_btnVoltarMousePressed

    private void btnAvancarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAvancarMousePressed
        Move("next");
    }//GEN-LAST:event_btnAvancarMousePressed

    private void btnConfigurarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfigurarMousePressed
        Configurar();
    }//GEN-LAST:event_btnConfigurarMousePressed
    
    private void Move(String direction) {
        if (labelSelect.getFileName() == null) {
            return;
        }

        // Caminho do diret√≥rio "labels"
        String directoryPath = "labels";

        // Cria o diret√≥rio se ele n√£o existir
        File directory = new File(directoryPath);
        File[] files = directory.listFiles((dir, name) -> name.endsWith(".png"));
        
        boolean found = false;
        int index = 0;
        int i = 0;
        
        switch (direction) {
            case "back":
                
                for (File file : files) {
                    
                    String fileCompare = "labels/" + file.getName();
                    if (fileCompare.equals(labelSelect.getFileName())) {
                        found = true;
                        index = i - 1;
                        break;
                    }
                    
                    i++;
                }
                
                if (found && index >= 0 && index < files.length) {
                    
                    BufferedImage image = null;
                    try {
                        
                        String fileName = "labels/" + files[index].getName();
                        image = ImageIO.read(new File(fileName));
                        
                        ImageIcon imageIcon = new ImageIcon(fitimage(image, 380, 550));
                        label1.setIcon(imageIcon);
                        label1.setText("");
                        
                        label1.revalidate();
                        label1.repaint();
                        
                        setZplText(files[index].getName().replace(".png", ".txt"));
                        setSelect(files[index].getName());
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                
                break;
            case "next":
                
                for (File file : files) {
                    
                    String fileCompare = "labels/" + file.getName();
                    
                    if (fileCompare.equals(labelSelect.getFileName())) {
                        found = true;
                        index = i + 1;
                        break;
                    }
                    
                    i++;
                }
                
                if (found && index >= 0 && index < files.length) {
                    
                    BufferedImage image = null;
                    
                    try {
                        String fileName = "labels/" + files[index].getName();
                        image = ImageIO.read(new File(fileName));
                        
                        ImageIcon imageIcon = new ImageIcon(fitimage(image, 380, 550));
                        label1.setIcon(imageIcon);
                        label1.setText("");
                        
                        label1.revalidate();
                        label1.repaint();
                        
                        setZplText(files[index].getName().replace(".png", ".txt"));
                        setSelect(files[index].getName());
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                break;
            default:
                throw new AssertionError();
        }
    }
    
    private void setSelect(String fileName) {

        // Caminho do diret√≥rio "labels"
        String directoryPath = "labels";

        // Cria o diret√≥rio se ele n√£o existir
        File directory = new File(directoryPath);
        File[] files = directory.listFiles((dir, name) -> name.endsWith(".png"));
        
        int index = 0;
        
        for (File file : files) {
            String fileCompare = "labels/" + file.getName();
            
            if (fileCompare.equals("labels/" + fileName)) {
                labelSelect = new Labels();
                labelSelect.setFileName(fileCompare);
                labelSelect.setZpl(null);
                
                break;
            }
            
            index++;
        }
        
        int i = 0;
        for (Component c : panel1.getComponents()) {
            JLabel label = (JLabel) c;
            
            if (i == index) {
                label.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                labelSelect.setjLabel(label);
            } else {
                label.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
            }
            
            i++;
        }
    }
    
    public void removeLabel() {
        label1.setText("");
        label1.setIcon(null);
        label1.revalidate();
        label1.repaint();
        txtZpl.setText("");
    }
    
    private void lerImagem() {
        // Caminho do diret√≥rio "labels"
        String directoryPath = "labels";

        // Cria o diret√≥rio se ele n√£o existir
        File directory = new File(directoryPath);
        if (!directory.exists()) {
            if (directory.mkdir()) {
                System.out.println("Diret√≥rio 'labels' criado com sucesso.");
            } else {
                System.out.println("Falha ao criar o diret√≥rio 'labels'.");
                return;
            }
        } else {
            System.out.println("O diret√≥rio 'labels' j√° existe.");
        }

        // Lista os arquivos do diret√≥rio
        File[] files = directory.listFiles();
        if (files == null || files.length == 0) {
            System.out.println("O diret√≥rio 'labels' est√° vazio.");
            return;
        }
        
        int i = 0;
        
        for (File file : files) {
            
            if (file.getName().toString().contains(".png")) {
                
                System.out.println(file.getName());
                
                BufferedImage image = null;
                try {
                    
                    image = ImageIO.read(new File("labels/" + file.getName()));
                    
                    if (file.isFile() && i == 0) {
                        
                        ImageIcon imageIcon = new ImageIcon(fitimage(image, 380, 550));
                        label1.setIcon(imageIcon);
                        label1.setText("");
                        
                        label1.revalidate();
                        label1.repaint();
                        
                        setZplText(file.getName().toString().replace(".png", ".txt"));
                    }
                    
                    JLabel newLabel = new JLabel();
                    newLabel.setFocusable(true);  // Habilita o foco no JLabel
                    ImageIcon imageIconNewLabel = new ImageIcon(fitimage(image, 80, 120));
                    newLabel.setIcon(imageIconNewLabel);
                    newLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                    
                    newLabel.addMouseListener(new MouseAdapter() {
                        
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            labelSelect = new Labels();
                            labelSelect.setFileName("labels/" + file.getName());
                            labelSelect.setZpl(null);
                            labelSelect.setjLabel(newLabel);
                            
                            File fileText = new File("labels/" + file.getName().replace(".png", ".txt"));
                            
                            Scanner sc = null;
                            
                            try {
                                sc = new Scanner(fileText);
                                String zpl = "";
                                while (sc.hasNextLine()) {
                                    try {
                                        zpl += sc.nextLine() + "\n";
                                    } catch (Exception ex) {
                                        System.out.println("==========================================================================");
                                    }
                                }
                                
                                txtZpl.setText(zpl);
                            } catch (IOException ex) {
                                System.out.println("Error: " + ex.getMessage());
                            } finally {
                                if (sc != null) {
                                    sc.close();
                                }
                            }
                            
                            BufferedImage image = null;
                            try {
                                image = ImageIO.read(new File("labels/" + file.getName()));
                                ImageIcon imageIcon = new ImageIcon(fitimage(image, 380, 550));
                                label1.setIcon(imageIcon);
                                label1.setText("");
                            } catch (IOException ex) {
                                Logger.getLogger(frmPrograma.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                            for (Component c : panel1.getComponents()) {
                                JLabel label = (JLabel) c;
                                label.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                            }
                            
                            newLabel.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                        }
                        
                    });
                    
                    panel1.add(newLabel);
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
                i++;
            }
            
        }
    }
    
    public void updateLabelImage(String fileName) {
        // Caminho do diret√≥rio "labels"
        String directoryPath = "labels";

        // Cria o diret√≥rio se ele n√£o existir
        File directory = new File(directoryPath);
        if (!directory.exists()) {
            if (directory.mkdir()) {
                System.out.println("Diret√≥rio 'labels' criado com sucesso.");
            } else {
                System.out.println("Falha ao criar o diret√≥rio 'labels'.");
                return;
            }
        } else {
            System.out.println("O diret√≥rio 'labels' j√° existe.");
        }

        // Lista os arquivos do diret√≥rio
        File[] files = directory.listFiles();
        if (files == null || files.length == 0) {
            System.out.println("O diret√≥rio 'labels' est√° vazio.");
            return;
        }
        
        for (File file : files) {
            
            if (file.getName().toString().contains(".png")) {
                
                BufferedImage image = null;
                try {
                    
                    image = ImageIO.read(new File("labels/" + file.getName()));
                    
                    if (file.isFile() && file.getName().toString() != fileName) {
                        
                        ImageIcon imageIcon = new ImageIcon(fitimage(image, 380, 550));
                        label1.setIcon(imageIcon);
                        label1.setText("");
                        
                        label1.revalidate();
                        label1.repaint();
                        
                        setZplText(file.getName().toString().replace(".png", ".txt"));
                    }
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private void deleteLabel() {
        FileDeletion f = new FileDeletion();
        f.deleteFile(labelSelect.getFileName());
        f.deleteFile(labelSelect.getFileName().replace(".png", ".txt"));
        
        panel1.remove(labelSelect.getjLabel());
        panel1.revalidate();
        panel1.repaint();
    }
    
    private Image fitimage(Image img, int w, int h) {
        BufferedImage resizedimage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedimage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(img, 0, 0, w, h, null);
        g2.dispose();
        return resizedimage;
    }
    
    public void setImageLabel(String filename) {
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(filename));
            ImageIcon imageIcon = new ImageIcon(fitimage(image, 380, 550));
            label1.setIcon(imageIcon);
            
            Thread thread = new Thread(() -> {
                BufferedImage imageNewLabel;
                try {
                    imageNewLabel = ImageIO.read(new File(filename));
                    
                    JLabel newLabel = new JLabel();
                    ImageIcon imageIconNewLabel = new ImageIcon(fitimage(imageNewLabel, 80, 120));
                    newLabel.setIcon(imageIconNewLabel);
                    newLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                    
                    newLabel.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            labelSelect = new Labels();
                            labelSelect.setFileName(filename);
                            labelSelect.setZpl(null);
                            labelSelect.setjLabel(newLabel);
                            
                            BufferedImage image = null;
                            try {
                                image = ImageIO.read(new File(filename));
                                ImageIcon imageIcon = new ImageIcon(fitimage(image, 380, 550));
                                label1.setIcon(imageIcon);
                                label1.setText("");
                            } catch (IOException ex) {
                                Logger.getLogger(frmPrograma.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                            for (Component c : panel1.getComponents()) {
                                JLabel label = (JLabel) c;
                                label.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                            }
                            
                            newLabel.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                            
                        }
                    });
                    
                    panel1.add(newLabel);
                    panel1.revalidate();
                    panel1.repaint();
                    
                } catch (IOException ex) {
                    Logger.getLogger(frmPrograma.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            });
            
            thread.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setZplText(String fileName) {
        File fileText = new File("labels/" + fileName);
        
        Scanner sc = null;
        
        try {
            sc = new Scanner(fileText);
            String zpl = "";
            while (sc.hasNextLine()) {
                try {
                    zpl += sc.nextLine() + "\n";
                } catch (Exception e) {
                    System.out.println("==========================================================================");
                }
            }
            
            txtZpl.setText(zpl);
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            if (sc != null) {
                sc.close();
            }
        }
    }
    
    public void Configurar() {
        // Criando o painel com componentes
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        // Criando os campos de texto
        JTextField endpointField = new JTextField(20);
        JTextField portField = new JTextField(20);
        
        endpointField.setText(ConfigManager.loadEndpoint());
        portField.setText(String.valueOf(ConfigManager.loadPort()));

        // Adicionando os campos e labels ao painel
        panel.add(new JLabel("ENDPOINT (WS://localhost/{endpoint})"));
        panel.add(endpointField);
        panel.add(new JLabel("PORT"));
        panel.add(portField);

        // Criando os bot√µes
        Object[] options = {"Salvar", "Cancelar"};
        int option = JOptionPane.showOptionDialog(null,
                panel,
                "Configura√ß√£o WebSocket",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null,
                options,
                options[0]);

        // A√ß√£o de acordo com o bot√£o pressionado
        if (option == 0) { // Salvar
            String endpoint = endpointField.getText();
            String port = portField.getText();
            System.out.println("ENDPOINT: " + endpoint);
            System.out.println("PORT: " + port);
            
            if (endpoint.trim().equals("") || port.trim().equals("")) {
                
                JOptionPane.showMessageDialog(
                        this,
                        "Informe o endpoint e a porta de comunica√ß√£o com o Web Socket",
                        "Aviso!",
                        JOptionPane.OK_OPTION
                );
                
                Configurar();
                return;
            }
            
            ConfigManager.saveConfig(Integer.parseInt(port), endpoint);
            
            try {
                JarRestart.restartApplication();
            } catch (IOException ex) {
                Logger.getLogger(frmPrograma.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("A√ß√£o cancelada.");
        }
    }
    
    public void getZpl() {
        JTextArea textArea = new JTextArea(20, 40); // Aproximadamente 400x400 pixels
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        
        String zpl = "^XA\n"
                + "\n"
                + "^FX Top section with logo, name and address.\n"
                + "^CF0,60\n"
                + "^FO50,50^GB100,100,100^FS\n"
                + "^FO75,75^FR^GB100,100,100^FS\n"
                + "^FO93,93^GB40,40,40^FS\n"
                + "^FO220,50^FDIntershipping, Inc.^FS\n"
                + "^CF0,30\n"
                + "^FO220,115^FD1000 Shipping Lane^FS\n"
                + "^FO220,155^FDShelbyville TN 38102^FS\n"
                + "^FO220,195^FDUnited States (USA)^FS\n"
                + "^FO50,250^GB700,3,3^FS\n"
                + "\n"
                + "^FX Second section with recipient address and permit information.\n"
                + "^CFA,30\n"
                + "^FO50,300^FDJohn Doe^FS\n"
                + "^FO50,340^FD100 Main Street^FS\n"
                + "^FO50,380^FDSpringfield TN 39021^FS\n"
                + "^FO50,420^FDUnited States (USA)^FS\n"
                + "^CFA,15\n"
                + "^FO600,300^GB150,150,3^FS\n"
                + "^FO638,340^FDPermit^FS\n"
                + "^FO638,390^FD123456^FS\n"
                + "^FO50,500^GB700,3,3^FS\n"
                + "\n"
                + "^FX Third section with bar code.\n"
                + "^BY5,2,270\n"
                + "^FO100,550^BC^FD12345678^FS\n"
                + "\n"
                + "^FX Fourth section (the two boxes on the bottom).\n"
                + "^FO50,900^GB700,250,3^FS\n"
                + "^FO400,900^GB3,250,3^FS\n"
                + "^CF0,40\n"
                + "^FO100,960^FDCtr. X34B-1^FS\n"
                + "^FO100,1010^FDREF1 F00B47^FS\n"
                + "^FO100,1060^FDREF2 BL4H8^FS\n"
                + "^CF0,190\n"
                + "^FO470,955^FDCA^FS\n"
                + "\n"
                + "^XZ";
        
        textArea.setText(zpl);
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(400, 400));
        
        Object[] message = {"Digite o c√≥digo ZPL:", scrollPane};
        
        int option = JOptionPane.showOptionDialog(
                null,
                message,
                "Enviar ZPL",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null,
                new String[]{"Confirmar Envio", "Cancelar"},
                "Confirmar Envio"
        );
        
        if (option == JOptionPane.OK_OPTION) {
            String zplText = textArea.getText();
            
             Date dataHoraAtual = new Date();
            String filename = new SimpleDateFormat("yyyyMMddHHmmss").format(dataHoraAtual);

            LabelaryRequest l = new LabelaryRequest();
            l.sendZpl(zplText, filename + ".png");
            txtZpl.setText(zplText);
            
            System.out.println("ZPL Enviado:\n" + zplText);
        } else {
            System.out.println("Envio cancelado.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPrograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPrograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPrograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPrograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPrograma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvancar;
    private javax.swing.JButton btnConfigurar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnTestar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel label1;
    private javax.swing.JPanel panel1;
    private javax.swing.JTextArea txtZpl;
    // End of variables declaration//GEN-END:variables
}
